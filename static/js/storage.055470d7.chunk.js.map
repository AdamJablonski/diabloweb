{"version":3,"sources":["storage.js","fs.js"],"names":["fs","create_fs","window","addEventListener","_ref","data","source","method","then","_ref2","files","transfer","Object","C_Work_diabloweb_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","values","map","f","buffer","postMessage","_create_fs","apply","this","arguments","_callee","store","_i","_Object$entries","_ref3","name","C_Work_diabloweb_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","IdbKvStore","Map","t0","json","t1","sent","entries","call","length","C_Work_diabloweb_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","set","abrupt","update","delete","remove","t2","Promise","resolve","stop"],"mappings":"kHAEMA,EAAKC,cACXC,OAAOC,iBAAiB,UAAW,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,OACrB,aAAhBD,EAAKE,QACPP,EAAGQ,KAAK,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MACFC,EAAWC,OAAAC,EAAA,EAAAD,CAAIF,EAAMI,UAAUC,IAAI,SAAAC,GAAC,OAAIA,EAAEC,SAChDX,EAAOY,YAAY,CAACX,OAAQ,UAAWG,SAAQC,yHCLtC,SAAeV,IAA9B,OAAAkB,EAAAC,MAAAC,KAAAC,sDAAe,SAAAC,IAAA,IAAAC,EAAAd,EAAAe,EAAAC,EAAAC,EAAAlB,EAAAmB,EAAAvB,EAAA,OAAAwB,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAELT,EAAQ,IAAIW,IAAW,aACvBzB,EAAQ,IAAI0B,IAHPX,EAAA,EAAAO,EAAAK,GAIczB,OAJdoB,EAAAE,KAAA,EAImCV,EAAMc,OAJzC,OAAAN,EAAAO,GAAAP,EAAAQ,KAAAd,EAAAM,EAAAK,GAIqBI,QAJrBC,KAAAV,EAAAK,GAAAL,EAAAO,IAAA,YAAAd,EAAAC,EAAAiB,QAAA,CAAAX,EAAAE,KAAA,SAAAP,EAAAD,EAAAD,GAAAhB,EAAAG,OAAAgC,EAAA,EAAAhC,CAAAe,EAAA,GAIDC,EAJCnB,EAAA,GAIKJ,EAJLI,EAAA,GAKTC,EAAMmC,IAAIjB,EAAMvB,GALP,QAAAoB,IAAAO,EAAAE,KAAA,uBAAAF,EAAAc,OAAA,SAOJ,CACLpC,QACAqC,OAAQ,SAACnB,EAAMvB,GAAP,OAAgBmB,EAAMqB,IAAIjB,EAAMvB,IACxC2C,OAAQ,SAAApB,GAAI,OAAIJ,EAAMyB,OAAOrB,MAVpB,eAAAI,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,SAAAA,EAAAc,OAAA,SAaJ,CACLpC,MAAO,IAAI0B,IACXW,OAAQ,kBAAMI,QAAQC,WACtBJ,OAAQ,kBAAMG,QAAQC,aAhBb,yBAAApB,EAAAqB,SAAA9B,EAAA","file":"static/js/storage.055470d7.chunk.js","sourcesContent":["import create_fs from './fs';\r\n\r\nconst fs = create_fs();\r\nwindow.addEventListener('message', ({data, source}) => {\r\n  if (data.method === 'transfer') {\r\n    fs.then(({files}) => {\r\n      const transfer = [...files.values()].map(f => f.buffer);\r\n      source.postMessage({method: 'storage', files}, transfer);\r\n    });\r\n  }\r\n});","import IdbKvStore from  'idb-kv-store';\r\n\r\nexport default async function create_fs() {\r\n  try {\r\n    const store = new IdbKvStore('diablo_fs');\r\n    const files = new Map();\r\n    for (let [name, data] of Object.entries(await store.json())) {\r\n      files.set(name, data);\r\n    }\r\n    return {\r\n      files,\r\n      update: (name, data) => store.set(name, data),\r\n      delete: name => store.remove(name),\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      files: new Map(),\r\n      update: () => Promise.resolve(),\r\n      delete: () => Promise.resolve(),\r\n    };\r\n  }  \r\n}\r\n"],"sourceRoot":""}